// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "relationmicor/kitex_gen/message"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetAllMessageMethod": kitex.NewMethodInfo(getAllMessageMethodHandler, newMessageServiceGetAllMessageMethodArgs, newMessageServiceGetAllMessageMethodResult, false),
		"SendMessageMethod":   kitex.NewMethodInfo(sendMessageMethodHandler, newMessageServiceSendMessageMethodArgs, newMessageServiceSendMessageMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func getAllMessageMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceGetAllMessageMethodArgs)
	realResult := result.(*message.MessageServiceGetAllMessageMethodResult)
	success, err := handler.(message.MessageService).GetAllMessageMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceGetAllMessageMethodArgs() interface{} {
	return message.NewMessageServiceGetAllMessageMethodArgs()
}

func newMessageServiceGetAllMessageMethodResult() interface{} {
	return message.NewMessageServiceGetAllMessageMethodResult()
}

func sendMessageMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceSendMessageMethodArgs)
	realResult := result.(*message.MessageServiceSendMessageMethodResult)
	success, err := handler.(message.MessageService).SendMessageMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceSendMessageMethodArgs() interface{} {
	return message.NewMessageServiceSendMessageMethodArgs()
}

func newMessageServiceSendMessageMethodResult() interface{} {
	return message.NewMessageServiceSendMessageMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetAllMessageMethod(ctx context.Context, request *message.GetAllMessageReq) (r *message.GetAllMessageResp, err error) {
	var _args message.MessageServiceGetAllMessageMethodArgs
	_args.Request = request
	var _result message.MessageServiceGetAllMessageMethodResult
	if err = p.c.Call(ctx, "GetAllMessageMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMessageMethod(ctx context.Context, request *message.SendMessageReq) (r *message.SendMessageResp, err error) {
	var _args message.MessageServiceSendMessageMethodArgs
	_args.Request = request
	var _result message.MessageServiceSendMessageMethodResult
	if err = p.c.Call(ctx, "SendMessageMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
