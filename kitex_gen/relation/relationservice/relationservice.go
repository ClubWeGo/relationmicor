// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "relationmicor/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ActionMethod":               kitex.NewMethodInfo(actionMethodHandler, newRelationServiceActionMethodArgs, newRelationServiceActionMethodResult, false),
		"GetFollowAndFollowerMethod": kitex.NewMethodInfo(getFollowAndFollowerMethodHandler, newRelationServiceGetFollowAndFollowerMethodArgs, newRelationServiceGetFollowAndFollowerMethodResult, false),
		"GetFollowListReqMethod":     kitex.NewMethodInfo(getFollowListReqMethodHandler, newRelationServiceGetFollowListReqMethodArgs, newRelationServiceGetFollowListReqMethodResult, false),
		"GetFollowerListMethod":      kitex.NewMethodInfo(getFollowerListMethodHandler, newRelationServiceGetFollowerListMethodArgs, newRelationServiceGetFollowerListMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceActionMethodArgs)
	realResult := result.(*relation.RelationServiceActionMethodResult)
	success, err := handler.(relation.RelationService).ActionMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceActionMethodArgs() interface{} {
	return relation.NewRelationServiceActionMethodArgs()
}

func newRelationServiceActionMethodResult() interface{} {
	return relation.NewRelationServiceActionMethodResult()
}

func getFollowAndFollowerMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowAndFollowerMethodArgs)
	realResult := result.(*relation.RelationServiceGetFollowAndFollowerMethodResult)
	success, err := handler.(relation.RelationService).GetFollowAndFollowerMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowAndFollowerMethodArgs() interface{} {
	return relation.NewRelationServiceGetFollowAndFollowerMethodArgs()
}

func newRelationServiceGetFollowAndFollowerMethodResult() interface{} {
	return relation.NewRelationServiceGetFollowAndFollowerMethodResult()
}

func getFollowListReqMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowListReqMethodArgs)
	realResult := result.(*relation.RelationServiceGetFollowListReqMethodResult)
	success, err := handler.(relation.RelationService).GetFollowListReqMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowListReqMethodArgs() interface{} {
	return relation.NewRelationServiceGetFollowListReqMethodArgs()
}

func newRelationServiceGetFollowListReqMethodResult() interface{} {
	return relation.NewRelationServiceGetFollowListReqMethodResult()
}

func getFollowerListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowerListMethodArgs)
	realResult := result.(*relation.RelationServiceGetFollowerListMethodResult)
	success, err := handler.(relation.RelationService).GetFollowerListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowerListMethodArgs() interface{} {
	return relation.NewRelationServiceGetFollowerListMethodArgs()
}

func newRelationServiceGetFollowerListMethodResult() interface{} {
	return relation.NewRelationServiceGetFollowerListMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionMethod(ctx context.Context, request *relation.ActionReq) (r *relation.ActionResp, err error) {
	var _args relation.RelationServiceActionMethodArgs
	_args.Request = request
	var _result relation.RelationServiceActionMethodResult
	if err = p.c.Call(ctx, "ActionMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowAndFollowerMethod(ctx context.Context, request *relation.GetFollowAndFollowerReq) (r *relation.GetFollowAndFollowerResp, err error) {
	var _args relation.RelationServiceGetFollowAndFollowerMethodArgs
	_args.Request = request
	var _result relation.RelationServiceGetFollowAndFollowerMethodResult
	if err = p.c.Call(ctx, "GetFollowAndFollowerMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowListReqMethod(ctx context.Context, request *relation.GetFollowListReq) (r *relation.GetFollowListResp, err error) {
	var _args relation.RelationServiceGetFollowListReqMethodArgs
	_args.Request = request
	var _result relation.RelationServiceGetFollowListReqMethodResult
	if err = p.c.Call(ctx, "GetFollowListReqMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerListMethod(ctx context.Context, request *relation.GetFollowerListReq) (r *relation.GetFollowerListResp, err error) {
	var _args relation.RelationServiceGetFollowerListMethodArgs
	_args.Request = request
	var _result relation.RelationServiceGetFollowerListMethodResult
	if err = p.c.Call(ctx, "GetFollowerListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
